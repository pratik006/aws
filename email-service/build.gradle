import com.amazonaws.services.lambda.model.InvocationType
import jp.classmethod.aws.gradle.lambda.AWSLambdaInvokeTask

plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "application"
}



version "0.1"
group "email.service"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://plugins.gradle.org/m2/" }
}

apply plugin: 'jp.classmethod.aws.lambda'

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-function-aws"
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-function-client"
    testImplementation "io.micronaut:micronaut-inject-java"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testRuntimeOnly "io.micronaut:micronaut-http-server-netty"
    testRuntimeOnly "io.micronaut:micronaut-function-web"

    compile 'com.amazonaws:aws-java-sdk-s3:1.11.734'
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-function-web")
    compile project(":lib")
    implementation("io.micronaut:micronaut-function-aws")
}

test.classpath += configurations.developmentOnly
shadowJar {
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
mainClassName = "email.service.Application"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': "email.service.Application"
    }
}

if(new File("${System.getProperty("user.home")}/.aws/credentials").exists()) {
    task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
        functionName = "email-service"
        handler = "io.micronaut.function.executor.FunctionApplication::apply"
        role = "arn:aws:iam::375170284425:role/lambda_basic_execution"
        runtime = com.amazonaws.services.lambda.model.Runtime.Java8
        zipFile = shadowJar.archivePath
        memorySize = 192
        timeout = 60
    }

}

task invoke(type: AWSLambdaInvokeTask) {
    functionName = "hello-world"
    invocationType = InvocationType.RequestResponse
    payload = '{\n' +
            '  "emailMessage": {\n' +
            '    "subject": "Test Subject 7",\n' +
            '    "textBody": "Test body 7",\n' +
            '    "recipients": "pioneerstest101@gmail.com",\n' +
            '    "from": "ixtester01@ixemailtester.onmicrosoft.com"\n' +
            '  },\n' +
            '  "emailAccount": {\n' +
            '    "username": "ixtester01@ixemailtester.onmicrosoft.com",\n' +
            '    "password": "Pega@123!",\n' +
            '    "host": "smtp.office365.com",\n' +
            '    "port": "587"\n' +
            '  }\n' +
            '}'
    doLast {
        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
    }
}
